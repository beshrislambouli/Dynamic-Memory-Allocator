TARGETS := mdriver malloc_wrapper.so

LOCAL := 0

CC := clang-6106
ASAN_FLAGS := -fsanitize=undefined,address -g -O0
# You can add -Werr to clang to force all warnings to turn into errors
CFLAGS := -std=gnu99 -g -Wall -fPIC
LDFLAGS := -lm
# Macros defined by the user or OpenTuner
PARAMS :=

ifeq ($(GETTIME),1)
	CFLAGS += -DGET_RUNNINGTIME
endif

# DO NOT MODIFY THE ARCHITECTURES
ifeq ($(LOCAL),0)
# Up to AVX 512 is supported.
	CFLAGS += -march=x86-64-v4
else
	CFLAGS += -march=native
endif

HEADERS := \
	allocator.h \
	allocator_interface.h \
	config.h \
	fsecs.h \
	mdriver.h \
	memlib.h \
	validator.h

# Blank line ends list.

# If you add a new file called "filename.c", you should
# add "filename.o \" to this list.
OBJS := \
	memlib.o

MDRIVER_OBJS:= \
	allocator.o \
	bad_allocator.o \
	clock.o \
	fcyc.o \
	fsecs.o \
	ftimer.o \
	libc_allocator.o \
	mdriver.o \
	my_allocator_wrappers.o \
	validator.o

ifeq ($(DEBUG),1)
  CFLAGS += -DDEBUG -O0 -g
else ifeq ($(ASAN),1)
	CFLAGS += $(ASAN_FLAGS)
	LDFLAGS += $(ASAN_FLAGS)
else
  CFLAGS += -DNDEBUG -O3
endif

CFLAGS += $(OTHER_CFLAGS)

# You shouldn't need to touch this.  This keeps track of whether or
# not you've changed CFLAGS.
OLD_CFLAGS := $(shell cat .cflags 2> /dev/null)
ifneq ($(CFLAGS),$(OLD_CFLAGS))
.cflags::
	@echo "$(CFLAGS)" > $@
endif

# make all targets specified
all: $(TARGETS) malloc_wrapper.so

.PHONY: all partial_clean clean

mdriver: $(OBJS) $(MDRIVER_OBJS)
	$(CC) $(PARAMS) $(LDFLAGS) $(OBJS) $(MDRIVER_OBJS) -o $@

malloc_wrapper.so: allocator.o real_memlib.o malloc_wrapper.o
	$(CC) $(PARAMS) $(LDFLAGS) -shared -fPIC $^ -o $@

# compile objects

# pattern rule for building objects
%.o: %.c .cflags
	$(CC) $(PARAMS) $(CFLAGS) -c $*.c -o $@

partial_clean::
	$(RM) -R $(TARGETS) $(OBJS) $(MDRIVER_OBJS) $(ALLOCATOR_TEST_OBJS) *.std* *.pyc malloc_wrapper.o real_memlib.o
	$(RM) -R tmp/*.out

# remove targets and .o files as well as output generated by AWSRUN
clean: partial_clean
	$(RM) -R *.db* *.log
